import cv2
import mediapipe as mp
import pyautogui
import time
import math

# Initialize MediaPipe FaceMesh
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)

# Get screen size
screen_width, screen_height = pyautogui.size()

# Disable PyAutoGUI fail-safe
pyautogui.FAILSAFE = False

# Open webcam
cap = cv2.VideoCapture(0)

# Reference nose position
nose_x_ref, nose_y_ref = None, None

# Gaze click timing variables
last_cursor_x, last_cursor_y = None, None
gaze_start_time = None
left_click_time = 1.5  # Hold gaze for 1.5s → Left Click
right_wink_time = 1.0  # Wink hold for 1s → Right Click
stability_threshold = 10  # Allowed small movement (in pixels)

# Blink detection thresholds
eye_closed_ratio = 0.2  # Lower value = more sensitive to blinks
right_eye_closed_time = None  # Track right wink start time
wink_hold_threshold = 0.3  # Time wink must be held (seconds)

def eye_aspect_ratio(eye_landmarks):
    """Calculate Eye Aspect Ratio (EAR) to detect winking/blinking."""
    vertical1 = math.dist(eye_landmarks[1], eye_landmarks[5])
    vertical2 = math.dist(eye_landmarks[2], eye_landmarks[4])
    horizontal = math.dist(eye_landmarks[0], eye_landmarks[3])
    return (vertical1 + vertical2) / (2.0 * horizontal)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip and convert frame
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)

    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            # Get nose position (fixed reference point)
            nose_x = face_landmarks.landmark[1].x
            nose_y = face_landmarks.landmark[1].y

            # Set initial nose reference
            if nose_x_ref is None or nose_y_ref is None:
                nose_x_ref, nose_y_ref = nose_x, nose_y

            # Get pupil positions
            left_eye_x = face_landmarks.landmark[474].x
            left_eye_y = face_landmarks.landmark[474].y
            right_eye_x = face_landmarks.landmark[469].x
            right_eye_y = face_landmarks.landmark[469].y

            # Calculate eye movement offsets
            eye_x_offset = ((left_eye_x + right_eye_x) / 2) - nose_x_ref
            eye_y_offset = ((left_eye_y + right_eye_y) / 2) - nose_y_ref

            # Scale movement for screen
            cursor_x = int(screen_width / 2 + (eye_x_offset * screen_width * 2))
            cursor_y = int(screen_height / 2 + (eye_y_offset * screen_height * 2))
            cursor_x = max(0, min(screen_width - 1, cursor_x))
            cursor_y = max(0, min(screen_height - 1, cursor_y))

            # Move the mouse smoothly
            pyautogui.moveTo(cursor_x, cursor_y, duration=0.1)

            # Detect Right Wink for Right Click
            right_eye_landmarks = [
                (face_landmarks.landmark[i].x, face_landmarks.landmark[i].y)
                for i in [362, 385, 387, 263, 373, 380]
            ]

            right_eye_ear = eye_aspect_ratio(right_eye_landmarks)

            if right_eye_ear < eye_closed_ratio:  # Right eye is closed (wink detected)
                if right_eye_closed_time is None:
                    right_eye_closed_time = time.time()  # Start wink timer
                elif time.time() - right_eye_closed_time >= wink_hold_threshold:
                    print("Right Click (Wink for 0.3s)")
                    pyautogui.click(button="right")
                    right_eye_closed_time = None  # Reset after right-click
            else:
                right_eye_closed_time = None  # Reset if right eye opens

            # **Hold Gaze for Left Click**
            if last_cursor_x is not None and last_cursor_y is not None:
                distance_moved = math.sqrt((cursor_x - last_cursor_x) ** 2 + (cursor_y - last_cursor_y) ** 2)

                # Allow small movements (within stability threshold)
                if distance_moved < stability_threshold:
                    if gaze_start_time is None:
                        gaze_start_time = time.time()  # Start timing
                    elif time.time() - gaze_start_time >= left_click_time:
                        print("Left Click (Hold Gaze for 1.5s)")
                        pyautogui.click()
                        gaze_start_time = None  # Reset after click
                else:
                    if gaze_start_time is not None and time.time() - gaze_start_time < 0.3:
                        pass  # Allow small movements without full reset
                    else:
                        gaze_start_time = None  # Reset if movement is too large
            else:
                gaze_start_time = None  # Reset if no previous position recorded

            last_cursor_x, last_cursor_y = cursor_x, cursor_y

    # Show webcam feed
    cv2.imshow("Eye Control: Cursor + Wink Click", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to exit
        break

cap.release()
cv2.destroyAllWindows()
